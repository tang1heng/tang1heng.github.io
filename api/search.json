[{"id":"703ba5165cdd77e4c0044ba63885ca1f","title":"学习型查询优化器 | Learned Query Optimizer","content":"Learned Query Optimizer | 学习型查询优化器\n\n\n\n\n\n\n\n\nLearned Query Optimizer: At the Forefront of AI-Driven Databases(EDBT tutorial)\n视频\n论文：https://openproceedings.org/2022/conf/edbt/tutorial-1.pdf\n一：数据库查询优化器（前置知识）查询优化器：对于输入查询生成最好的物理计划。\n\n\n输入：查询$Q$和数据$D$。\n\n输出：计划$P$。\n\n困难：在于不同的连接顺序、连接方法、扫描方式等。\n\nPlanner架构：火山Volcano框架。\n\n连接顺序选择：枚举所有可能的候选计划。\n基数估计：估计每条子查询的元祖数量。\n代价模型：估计每条子查询的运行时代价。\n\n\n缺点：经验驱动，不够好。\n\n\n二：学习型查询优化器内部组件2.1 学习型基数估计2.1.1 问题定义和传统方法基数估计问题：在不实际执行查询下估计查询$Q$产生的结果大小$C(Q)$。\n基数估计是代价估计和连接顺序选择问题的基础。\n基数估计的相关性能指标：\n\n准确度决定查询计划的质量。\n推理速度（延迟）决定整体查询运行时间。\n模型大小、训练和更新的时间也很重要。\n\n传统基数估计方法：\n\n直方图：基于属性间独立性假设 $Pr(A)\\approx \\prod_i Pr(A_i)$\n特点：推理速度快、存储成本低、估计误差大\n变种：多维直方图、查询驱动的直方图\n\n\n抽样：在一个更小的数据抽样集里执行查询\n特点：在估计准确度和推理速度之间权衡\n变种：核密度估计\n\n\n连接估计：基于连接均匀性假设\n估计连接查询 $Q&#x3D;T\\Join R$ 为：$C(Q)&#x3D;Pr_T(Q_T) * Pr_R(Q_R) * |T\\Join R|$\n基于连接的抽样\n\n\n\n2.1.2 学习型查询驱动方法学习型查询驱动方法：通过分析查询负载，学习一个回归模型用来映射从查询$Q$到基数$C(Q)$。\n\n查询特征工程十分重要。\n\n模型：XGboost、神经网络、树型LSTM、深度集成学习…\n\n\n\n\n优点：推理速度快、多用途（连接范式、过滤类型…）\n缺点：估计准确度严重依赖于训练查询负载\n要求大量用于训练的查询（无法用于新数据库上）\n如果数据或查询工作负载改变，性能会严重下降\n\n\n\n2.1.3 学习型数据驱动方法学习型数据驱动方法：通过分析数据，然后学习表$T$属性$A$上的概率分布函数$Pr_T(A)$。\n\n$C(Q)&#x3D;Pr_T(A)*|T|$\n构建统计模型来捕获数据分布$Pr_T(A)$\n\n常见方法：\n\n深度自回归模型（Neurocard）：分解联合数据分布为条件分布。\n$Pr_T(A)&#x3D;Pr_T(A_1)*Pr_T(A_2|A_1)Pr_T(A_3|A_2,A_1)…*Pr_T(A_n|A_{n-1},…,A_1)$\n估计准确度高、模型规模大、推理速度慢。\n\n\n\n概率图模型：\n贝叶斯网络（BayesCard）：基于条件独立假设。\n$Pr(A)&#x3D;\\prod_{i}Pr(A_i|A_{pa(i)})$\n估计准确度高、模型规模小、推理速度快、训练速度慢。\n\n\n和积网络（DeepDB）：基于局部独立假设，在属性之间按行分裂来寻找局部独立性。\n估计准确度、推理速度、模型大小都对属性相关性敏感。\n\n\n\n因式分解和积网络（FLAT）：结合了BN和SPN，自适应地处理高相关和弱相关的属性。\n估计准确度高、模型规模小、推理速度慢（对于大量属性）。\n\n\n\n\n\n规范化流模型（FACE）：\n估计准确度高、推理速度快、模型规模小（紧实）。\n\n\n\n使用基于扇出（fanout）的方法来处理连接（join）查询：\n表中的每条元祖在连接结果中可以出现多次。\n可以产生准确的估计。\n\n\n基于界限的方法\n代替去直接估计基数，而是提供一个上界（最坏的情况）。\n可以避免非常昂贵的连接顺序和物理算子。\n可以生成有效的查询计划但是具有不可承担的延迟。\n严格来说不算基数估计（无法从细节上解释）。\n\n\nBenchmark\nIMDB JOB-light\n有复杂分布的真实世界数据集\n包含6张表，星型连接（join）模式\n\n\nSTATS-CEB\n\n\n\n2.1.4 学习型混合方法\nLearning to be a Statistician: Learned Estimator for Number of Distinct Values\nFlowloss：Flow-Loss: Learning Cardinality Estimates That Matter\nGLUE：\n\n2.1.5 实验对比分析实验结果：\n\n总结：\n\n传统方法是最通用的、轻量级、很快训练和更新、低延迟、很容易部署在数据库系统上。\n学习型数据驱动方法在估计准确度性能上SOTA，但是不够通用，有的模型过大并且推理速度过慢。\n学习型查询驱动方法在静态数据库实例上表现很好，但是无法用于新数据库，或者数据库在频繁更新或工作负载偏移的场景。\n\n2.2 学习型代价估计\n任务目标：给定一条SQL查询Q的物理执行计划P，基于查询Q的基数以及P的算子，去估计查询执行时间&#x2F;资源消耗。\n相关性：代价估计依赖于基数。\n估计困难度：比基数估计更加苦难，因为需要考虑不同因素（比如顺序扫描成本、CPU使用率等等）。\n方法分类：\n单条查询的代价估计：\n特点：end2end，基于树型的计划编码。\n关键思想：使用之前的计划来训练一个树型的神经网络，用来直接预测代价。\n\n\n多条查询（并发下）的代价估计：\n特点：一条计划的性能可能由于计划之间的相关性而不同。\n关键思想：使用一个图来表征计划之间的相关性，然后使用一个神经网络来预测代价。\n\n\n\n\n\n2.2.1 经验驱动方法（基于规则）2.2.2 单条查询的代价估计挑战：\n\n构建一个端到端的模型用于代价估计，防止基数估计误差造成的累计误差。\n学习模型应该捕获查询计划中的树型结构信息。\n难以对谓词进行编码。\n\nTree-LSTM：\n\n表征层：学习每条子查询的嵌入。\n估计层：同时输出基数和代价。\n\n\n2.2.3 并发查询的代价估计现有方法专注于预测单个查询的性能，但不能有效地预测并发查询的性能，因为很难捕捉不同查询之间的相关性，例如锁冲突和缓冲区共享。\n\n查询之间有复杂的联系\n数据配置的约束\n\nQPP：\n\n顶点建模：获取查询计划；从计划中抽取算子作为顶点特征。\n边建模：计算四种类型的边之间的关系\nParent-Child\nData Sharing\nData Conflict\nResource\n\n\n\n\n2.3 学习型连接顺序搜索连接顺序枚举：给定一条SQL查询，一个连接join排序被二叉树捕获，叶子节点表示一个基表关系。目标是选择最“便宜”的排序（根据代价模型）。\n2.3.1 问题定义和现存方法\n离线：\n特征：基于工作负载，使用基于强化学习的方法。\n关键思想：使用现存的负载来训练一个学习型优化器，用来预测未来的负载的计划。\n\n\n在线：\n特征：不提供工作负载，但是依赖于定制数据库。\n关键思想：查询计划可以在执行中改变。一旦发现当前计划是糟糕的，就可以选择切换到另外一个计划。这种方法在数据库实际执行查询时才开始学习。\n\n\n\n2.3.2 离线学习方法背景：\n\n连接顺序的搜索空间巨大。\n传统优化器无法从之前的例子中学习。\n\n挑战：\n\n如何减少连接顺序的搜索空间？\n如何选择最好的连接顺序？\n\nReJoin：\n\n强化学习模型\nagent：optimizer\naction：join\nenv：cost mode，database\nreward：cost，latency\nstate：join order\n\n\n\n\n\nRTOS：\n\n将TreeLSTM作为Q network\n两步骤训练：\n代价预训练\n延迟微调\n\n\n动态神经网络\n通过DFS来为每条计划构建神经网络。\n\n\n\n\n\n2.3.3 在线学习方法背景：\n\n真实数据库负载差异大。\n之前基于学习的优化器需要提供训练查询，很难针对不同负载给出好的计划。\n\n挑战：\n\n如何设计一个新的工作机制来允许优化器学习并切换到不同的连接顺序（在线）。\n如何评估并选择不同的连接顺序（在线）。\n\n2.3.4 对比分析\n2.4 总结\n基数估计 CardEst\n\n代价估计 CostEst\n\n连接选择 JoinSel\n\n它们可以一起工作来生成最佳的查询计划。\n\n比如，JoinSel 可以基于 CostEst 来选择一个好的顺序。\n\n\n它们都可以通过机器学习技术来优化。\n\nCostEst 利用神经网络来编码查询并预测代价，CardEst 的方法也可以使用。\nJoinSel 依赖于基于强化学习的方法，因为连接顺序选择问题可以看成是一个做决定的过程，并且数据库可以提供反馈作为回报。\n\n\n\n三：学习型查询优化器整体模块3.1 端到端学习型QO：Neo\n从输入查询到可执行的计划。\n\n\n\nSQL查询级别的编码：\n连接信息\n谓词信息\n\n\n\n\n\n查询执行计划的编码：\n\n\n\n价值网络：\n网络架构：树卷积\n基于归纳偏置：树形结构的查询计划\n\n\n\n\n\n\n\n树卷积操作\n自动为不同的算子、表学习 filter 的权重\n\n\n\n\n\n优点：\n第一个自动的端到端地学习型查询优化器\n\n\n缺点：\n从零学习整个查询优化器的所有东西：长的训练时间和重的冷启动问题\n对每个数据库都需要特定的特征化：很难泛化到更新场景。\n代替而不是修改：无法重用现存的DBMS代码。\n\n\n\n3.2 学习引导QO：Bao背景：\n\n现存查询优化器有不同的hint set（提示集）：可以disable或enable特定类型的算子，比如禁止loop join等。\n对于每条查询，调整到一个好的hint set可以有助于生成一个好的计划。\n\n\n\n学习在现存查询优化器上找到正确的hint set。\n\n\n\nBao的预测模型架构\n和Neo一样基于树卷积\n\n\n\n\n评估结果：\n\n在长时间训练后Neo可以胜过Bao，因为Neo比Bao在计划选择上更自由（有更大的选择空间）。\nBao更快更容易适应于动态负载环境。\n\n优点：\n\n引导而不是替代：重用现存查询优化器，更容易部署。\n容易适应数据、查询、系统更新：更好的泛化能力。\n更小的训练时间（相比于Neo）\n\n缺点：\n\n计划选择空间受限：性能有时会损失。\n冷启动问题和回归问题仍然存在。\n\n学习型QO对比：\n\n\n\n\n3.3 统一、可迁移的模型：MTMLF基本思想：学习到的知识是可分解的。\n\n任务特定的知识：用来解决特定任务，比如连接顺序（排序）选择的规则。\n用一个小模型去适应每个任务。\n\n\n任务共享的知识：数据和查询表征（可以在所有任务中使用）。\n学习查询语句的统一表征。\n\n\n数据特定的知识：比如数据和查询负载分布。\n适应每个数据库。\n\n\n数据无关的元知识：跨数据库的常见规则，比如专家经验、多表连接规则。\n在不同数据库间总结元数据。\n\n\n\n微调预先训练号好的模型来适应用户数据：\n架构：\n\n更有效的训练，而不是对冗余知识的学习。\n更高效的任务建模，在有先验知识的指导下，比如从代价估计到基数估计。\n可转移能力，避免冷启动回归问题。\n\n工作流：\n\n预训练大模型提供基础工具。\n更深度的优化：能看到更多的数据。\n容易进化和管理。\n\n\n实验评估结果：\n\none mode for all 架构更准确\n多任务学习 &gt; 单独学习\n\n\none mode for all 架构更有效\n预训练+微调 范式可以迁移到新数据库上\n\n\n\n\n\n3.4 比较和分析\nNeo：从零学习整个查询优化器，端到端。\n长的训练时间、低的泛化能力、严重的冷启动问题。\n\n\nBao：学习引导现存的查询优化器，通过调整提示集。\n容易部署和更好的泛化能力。\n性能损失，仍然存在冷启动问题。\n\n\nMTMLF：预训练+微调\n一个可能的方向，对于学习型查询优化器来说。\n\n\n\n四：应用和部署4.1 学习型QO的应用案例研究4.1.1 将学习型代价模型装配到微软SCOPE查询优化器4.1.2 学习引导微软SCOPE查询优化器4.2 真实部署面临的挑战4.3 Baihe五：总结和未来工作5.1 总结\n学习查询优化器中的关键组件\n学习整个查询优化器\n\n5.2 未来工作\n基数估计\n融合数据驱动和查询驱动方法\n适应性方法：AP和TP场景、不同的数据和查询工作负载\n性能提升：\n更新速度\n多表查询上的准确度\n意识到不同子查询\n\n\n\n\n代价模型和连接选择\n自动生成足够的训练数据（覆盖范围大）\n鲁棒模型，针对动态负载或不同场景\n给定一个负载和数据集，智能AI算法选择\n\n\n学习型QO\n预训练+微调\n新架构用来引导现存QO\n新的训练、更新策略\n\n\n应用和部署\n通用的部署工具\n定制化调整\n\n\n除了QO：延伸到其他AI4DB任务\nindexing\nadvisor\ndiagnosis\n\n\n\n","slug":"学习型查询优化器-Learned-Query-Optimizer","date":"2022-10-29T09:47:04.000Z","categories_index":"","tags_index":"查询优化","author_index":"Tomison"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n测试图片插入图片：\n\n","slug":"hello-world","date":"2022-10-25T12:12:58.187Z","categories_index":"","tags_index":"","author_index":"Tomison"}]